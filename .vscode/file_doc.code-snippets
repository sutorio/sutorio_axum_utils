{
  "file section": {
    "scope": "rust",
    "prefix": "ssect",
    "body": [
      "// -----------------------------------------------------------------------------",
      "// ${1:SECTION TITLE}",
      "// -----------------------------------------------------------------------------"
    ],
    "description": "Creates a section in a rust file"
  },
  "error boilerplate": {
    "scope": "rust",
    "prefix": "serr",
    "body": [
      "pub type Result<T> = core::result::Result<T, Error>;",
      "",
      "#[derive(Debug, serde::Serialize)]",
      "pub enum Error {}",
      "",
      "impl core::fmt::Display for Error {",
      "  fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::result::Result<(), core::fmt::Error> {",
      "    write!(fmt, \"{self:?}\")",
      "  }",
      "}",
      "",
      "impl std::error::Error for Error {}"
    ],
    "description": "Creates a boilerplate error type"
  },
  "error From impl boilerplate": {
    "scope": "rust",
    "prefix": "serrimpl",
    "body": [
      "impl From<${1: mod}::Error> for Error {",
      "    fn from(val: ${1: mod}::Error) -> Self {",
      "        Self::${2: variant}(val)",
      "    }",
      "}"
    ],
    "description": "Add an Error impl used to wrap dependency error"
  },
  "test module boilerplate": {
    "scope": "rust",
    "prefix": "stest",
    "body": [
      "#[cfg(test)]",
      "mod tests {",
      "    use super::*;",
      "    use anyhow::Result;",
      "}"
    ],
    "description": "Creates a boilerplate test module"
  },
  "async test function boilerplate": {
    "scope": "rust",
    "prefix": "stestfn",
    "body": [
      "#[serial]",
      "#[tokio::test]",
      "async fn test_${1:test_name}() -> Result<()> {",
      "    Ok(())",
      "}"
    ],
    "description": "Creates a boilerplate async test function"
  },
}